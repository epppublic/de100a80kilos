export const createConvertDelta = (addSymbol, formAddStatement, formRemoveStatement, formSetStatement) => (delta) => {
    const addStatements = [];
    const expressionAttributeNames = {};
    const expressionAttributeValues = {};
    const removeStatements = [];
    const setStatements = [];
    const updateExpressions = [];
    for (const [property, value] of Object.entries(delta)) {
        if (value === undefined) {
            removeStatements.push(formRemoveStatement(property, expressionAttributeNames));
        }
        else if (Array.isArray(value) && value[0] === addSymbol) {
            addStatements.push(formAddStatement(property, value[1], expressionAttributeNames, expressionAttributeValues));
        }
        else if (typeof value === 'boolean' || typeof value === 'number' || typeof value === 'string' || typeof value === 'object') {
            setStatements.push(formSetStatement(property, value, expressionAttributeNames, expressionAttributeValues));
        }
    }
    if (addStatements.length > 0) {
        updateExpressions.push(`ADD ${addStatements.join(', ')}`);
    }
    if (removeStatements.length > 0) {
        updateExpressions.push(`REMOVE ${removeStatements.join(', ')}`);
    }
    if (setStatements.length > 0) {
        updateExpressions.push(`SET ${setStatements.join(', ')}`);
    }
    return {
        ExpressionAttributeNames: Object.keys(expressionAttributeNames).length > 0 ? expressionAttributeNames : undefined,
        ExpressionAttributeValues: expressionAttributeValues,
        UpdateExpression: updateExpressions.join(' ')
    };
};
//# sourceMappingURL=convert-delta.js.map