import type { isBooleanItemValue as isBooleanItemValueFunction } from '../guards/boolean-item-value';
import type { isListItemValue as isListItemValueFunction } from '../guards/list-item-value';
import type { isMapItemValue as isMapItemValueFunction } from '../guards/map-item-value';
import type { isNullItemValue as isNullItemValueFunction } from '../guards/null-item-value';
import type { isNumberItemValue as isNumberItemValueFunction } from '../guards/number-item-value';
import type { isStringItemValue as isStringItemValueFunction } from '../guards/string-item-value';
import { TConvertItemArrayFactory, TConvertItemObjectFactory, TItemValue } from '../types';
export declare const createConvertItemValue: (createConvertItemArray: TConvertItemArrayFactory, createConvertItemObject: TConvertItemObjectFactory, isBooleanItemValue: typeof isBooleanItemValueFunction, isListItemValue: typeof isListItemValueFunction, isMapItemValue: typeof isMapItemValueFunction, isNullItemValue: typeof isNullItemValueFunction, isNumberItemValue: typeof isNumberItemValueFunction, isStringItemValue: typeof isStringItemValueFunction) => (value: TItemValue) => string | number | boolean | import("../types").TDerivedDataArray<TItemValue[]> | {
    [x: string]: never;
} | null;
//# sourceMappingURL=convert-item-value.d.ts.map